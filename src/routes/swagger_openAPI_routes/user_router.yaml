openapi: 3.0.0
info:
  version: 1.0.0
  title: User Management API
  description: Documentation for user management endpoints
paths:
  /user/{id}:
    get:
      summary: Get user by ID
      tags:
        - user
      description: Retrieve user information by their ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object  # Adjust schema according to user data structure
  /user:
    post:
      summary: Create user
      tags:
        - user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object  # Adjust schema according to user data structure
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "customer added"
  /user/{id}/update:
    post:
      summary: Update user data
      tags:
        - user
      description: Update user data by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object  # Adjust schema according to user data structure
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object  # Adjust schema according to user data structure
  /deleteUser/{id}:
    post:
      summary: Delete user
      tags:
        - user
      description: Delete user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authToken:
                  type: string
          example:
            authToken: "JWT_TOKEN_HERE"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "User deleted successfully"
  /user/{id}/borrow/{bookId}:
    post:
      summary: Borrow book
      tags:
        - user
      description: Borrow a book by user ID and book ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object  # Adjust schema according to book interaction data structure
  /user/{id}/return/{bookId}:
    put:
      summary: Return book
      tags:
        - user
      description: Return a borrowed book by user ID and book ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object  # Adjust schema according to book interaction data structure
  /user/{id}/review/{bookId}/{stars}:
    post:
      summary: Create review
      tags:
        - user
      description: Create a review for a book by user ID, book ID, and star rating
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
        - in: path
          name: stars
          required: true
          schema:
            type: string
          description: Star rating (e.g., 1, 2, 3, 4, 5)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object  # Adjust schema according to review data structure
